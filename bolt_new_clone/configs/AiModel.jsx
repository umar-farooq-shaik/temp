const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};


  export const chatSession = model.startChat({
    generationConfig,
    history: [
    ],
  });

  export const GenAiCode=model.startChat({
    generationConfig:CodeGenerationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate to do app: Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere’s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"projectTitle\": \"TaskMaster - A To-Do Application\",\n  \"explanation\": \"TaskMaster is a React-based to-do application designed to help users efficiently manage their tasks. It features a clean, intuitive interface built with Tailwind CSS. The application allows users to create, edit, delete, and mark tasks as complete. It incorporates Lucide React icons for a visually appealing and user-friendly experience. Date-fns used for date format, react-chartjs-2 chart, graph library, and Firebase is used for backend authentication and storage. Also include emoji to give user a better experience. TaskMaster aims to improve productivity and organization in daily life.  The application includes visually appealing charts to track progress and uses a beautiful design.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport { AuthProvider } from './context/AuthContext';\\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\\nimport Login from './components/auth/Login';\\nimport Register from './components/auth/Register';\\nimport Dashboard from './components/Dashboard/Dashboard';\\n\\n\\nfunction App() {\\n  return (\\n    <AuthProvider>\\n      <Router>\\n        <Routes>\\n          <Route path=\\\"/login\\\" element={<Login />} />\\n          <Route path=\\\"/register\\\" element={<Register />} />\\n          <Route path=\\\"/dashboard\\\" element={<Dashboard />} />\\n          <Route path=\\\"/\\\" element={<Navigate replace to=\\\"/login\\\" />} />\\n        </Routes>\\n      </Router>\\n    </AuthProvider>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/auth/Login.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { useNavigate, Link } from 'react-router-dom';\\nimport { useAuth } from '../../context/AuthContext';\\nimport { Mail, ArrowRight } from 'lucide-react';\\n\\nconst Login = () => {\\n  const [email, setEmail] = useState('');\\n  const [password, setPassword] = useState('');\\n  const [error, setError] = useState('');\\n  const { login } = useAuth();\\n  const navigate = useNavigate();\\n\\n  const handleSubmit = async (e) => {\\n    e.preventDefault();\\n    setError('');\\n    try {\\n      await login(email, password);\\n      navigate('/dashboard');\\n    } catch (err) {\\n      setError('Failed to sign in');\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"flex items-center justify-center h-screen bg-gray-100\\\">\\n      <div className=\\\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 w-full max-w-md\\\">\\n        <h2 className=\\\"text-2xl font-bold mb-6 text-center\\\">Log in 🔑</h2>\\n        {error && <div className=\\\"text-red-500 text-sm mb-4\\\">{error}</div>}\\n        <form onSubmit={handleSubmit}>\\n          <div className=\\\"mb-4\\\">\\n            <label className=\\\"block text-gray-700 text-sm font-bold mb-2\\\" htmlFor=\\\"email\\\">\\n              Email\\n            </label>\\n            <div className=\\\"relative\\\">\\n              <Mail className=\\\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\\\" size={16} />\\n              <input\\n                className=\\\"shadow appearance-none border rounded w-full py-2 px-8 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-8\\\"\\n                id=\\\"email\\\"\\n                type=\\\"email\\\"\\n                placeholder=\\\"Email\\\"\\n                value={email}\\n                onChange={(e) => setEmail(e.target.value)}\\n              />\\n            </div>\\n          </div>\\n          <div className=\\\"mb-6\\\">\\n            <label className=\\\"block text-gray-700 text-sm font-bold mb-2\\\" htmlFor=\\\"password\\\">\\n              Password\\n            </label>\\n            <input\\n              className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\\\"\\n              id=\\\"password\\\"\\n              type=\\\"password\\\"\\n              placeholder=\\\"Password\\\"\\n              value={password}\\n              onChange={(e) => setPassword(e.target.value)}\\n            />\\n          </div>\\n          <div className=\\\"flex items-center justify-between\\\">\\n            <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline flex items-center\\\">\\n              Log In <ArrowRight className=\\\"ml-2\\\" size={16} />\\n            </button>\\n            <Link to=\\\"/register\\\" className=\\\"inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800\\\">\\n              Register\\n            </Link>\\n          </div>\\n        </form>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Login;\"\n    },\n    \"/components/auth/Register.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { useNavigate, Link } from 'react-router-dom';\\nimport { useAuth } from '../../context/AuthContext';\\nimport { Mail, ArrowRight, User } from 'lucide-react';\\n\\nconst Register = () => {\\n  const [email, setEmail] = useState('');\\n  const [password, setPassword] = useState('');\\n  const [confirmPassword, setConfirmPassword] = useState('');\\n  const [error, setError] = useState('');\\n  const { signup } = useAuth();\\n  const navigate = useNavigate();\\n\\n  const handleSubmit = async (e) => {\\n    e.preventDefault();\\n    if (password !== confirmPassword) {\\n      return setError('Passwords do not match');\\n    }\\n\\n    try {\\n      await signup(email, password);\\n      navigate('/dashboard');\\n    } catch (err) {\\n      setError('Failed to create an account');\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"flex items-center justify-center h-screen bg-gray-100\\\">\\n      <div className=\\\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 w-full max-w-md\\\">\\n        <h2 className=\\\"text-2xl font-bold mb-6 text-center\\\">Register 📝</h2>\\n        {error && <div className=\\\"text-red-500 text-sm mb-4\\\">{error}</div>}\\n        <form onSubmit={handleSubmit}>\\n          <div className=\\\"mb-4\\\">\\n            <label className=\\\"block text-gray-700 text-sm font-bold mb-2\\\" htmlFor=\\\"email\\\">\\n              Email\\n            </label>\\n            <div className=\\\"relative\\\">\\n              <Mail className=\\\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\\\" size={16} />\\n              <input\\n                className=\\\"shadow appearance-none border rounded w-full py-2 px-8 text-gray-700 leading-tight focus:outline-none focus:shadow-outline pl-8\\\"\\n                id=\\\"email\\\"\\n                type=\\\"email\\\"\\n                placeholder=\\\"Email\\\"\\n                value={email}\\n                onChange={(e) => setEmail(e.target.value)}\\n              />\\n            </div>\\n          </div>\\n          <div className=\\\"mb-4\\\">\\n            <label className=\\\"block text-gray-700 text-sm font-bold mb-2\\\" htmlFor=\\\"password\\\">\\n              Password\\n            </label>\\n            <input\\n              className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\\\"\\n              id=\\\"password\\\"\\n              type=\\\"password\\\"\\n              placeholder=\\\"Password\\\"\\n              value={password}\\n              onChange={(e) => setPassword(e.target.value)}\\n            />\\n          </div>\\n          <div className=\\\"mb-6\\\">\\n            <label className=\\\"block text-gray-700 text-sm font-bold mb-2\\\" htmlFor=\\\"confirmPassword\\\">\\n              Confirm Password\\n            </label>\\n            <input\\n              className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\\\"\\n              id=\\\"confirmPassword\\\"\\n              type=\\\"password\\\"\\n              placeholder=\\\"Confirm Password\\\"\\n              value={confirmPassword}\\n              onChange={(e) => setConfirmPassword(e.target.value)}\\n            />\\n          </div>\\n          <div className=\\\"flex items-center justify-between\\\">\\n            <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline flex items-center\\\">\\n              Register <ArrowRight className=\\\"ml-2\\\" size={16} />\\n            </button>\\n            <Link to=\\\"/login\\\" className=\\\"inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800\\\">\\n              Login\\n            </Link>\\n          </div>\\n        </form>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Register;\"\n    },\n    \"/components/Dashboard/Dashboard.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport { useAuth } from '../../context/AuthContext';\\nimport { useNavigate } from 'react-router-dom';\\nimport TaskList from './TaskList';\\nimport TaskForm from './TaskForm';\\nimport { Home, Plus, User, Settings, ArrowRight, Trash, Edit } from 'lucide-react';\\nimport { getTasks, addTask, updateTask, deleteTask } from '../../firebase';\\nimport Profile from './Profile';\\n\\n\\nconst Dashboard = () => {\\n  const [tasks, setTasks] = useState([]);\\n  const { currentUser, logout } = useAuth();\\n  const navigate = useNavigate();\\n  const [showProfile, setShowProfile] = useState(false);\\n\\n  useEffect(() => {\\n    if (currentUser) {\\n      fetchTasks();\\n    }\\n  }, [currentUser]);\\n\\n  const fetchTasks = async () => {\\n    const fetchedTasks = await getTasks(currentUser.uid);\\n    setTasks(fetchedTasks);\\n  };\\n\\n  const handleAddTask = async (task) => {\\n    const newTask = await addTask(currentUser.uid, task);\\n    setTasks([...tasks, newTask]);\\n  };\\n\\n  const handleUpdateTask = async (updatedTask) => {\\n    await updateTask(currentUser.uid, updatedTask);\\n    setTasks(tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task)));\\n  };\\n\\n  const handleDeleteTask = async (id) => {\\n    await deleteTask(currentUser.uid, id);\\n    setTasks(tasks.filter((task) => task.id !== id));\\n  };\\n\\n  const handleLogout = async () => {\\n    try {\\n      await logout();\\n      navigate('/login');\\n    } catch (error) {\\n      console.log(error);\\n    }\\n  };\\n\\n  const toggleProfile = () => {\\n    setShowProfile(!showProfile);\\n  };\\n\\n  return (\\n    <div className=\\\"flex h-screen bg-gray-100\\\">\\n      {/* Sidebar */}\\n      <div className=\\\"w-64 bg-gray-800 text-white flex flex-col\\\">\\n        <div className=\\\"p-4 flex items-center justify-center\\\">\\n          <h1 className=\\\"text-2xl font-bold\\\">TaskMaster ✨</h1>\\n        </div>\\n        <nav className=\\\"flex-1 p-4\\\">\\n          <ul>\\n            <li className=\\\"mb-2\\\">\\n              <button className=\\\"flex items-center hover:text-blue-300 w-full py-2 px-4 rounded transition duration-200\\\">\\n                <Home className=\\\"mr-2\\\" size={20} />\\n                Dashboard\\n              </button>\\n            </li>\\n            <li className=\\\"mb-2\\\">\\n              <button className=\\\"flex items-center hover:text-blue-300 w-full py-2 px-4 rounded transition duration-200\\\">\\n                <Plus className=\\\"mr-2\\\" size={20} />\\n                Add Task\\n              </button>\\n            </li>\\n            <li className=\\\"mb-2\\\">\\n              <button onClick={toggleProfile} className=\\\"flex items-center hover:text-blue-300 w-full py-2 px-4 rounded transition duration-200\\\">\\n                <User className=\\\"mr-2\\\" size={20} />\\n                Profile\\n              </button>\\n            </li>\\n            <li>\\n              <button className=\\\"flex items-center hover:text-blue-300 w-full py-2 px-4 rounded transition duration-200\\\">\\n                <Settings className=\\\"mr-2\\\" size={20} />\\n                Settings\\n              </button>\\n            </li>\\n          </ul>\\n        </nav>\\n\\n        <div className=\\\"p-4\\\">\\n          <button onClick={handleLogout} className=\\\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full flex items-center justify-center\\\">\\n            Logout <ArrowRight className=\\\"ml-2\\\" size={16} />\\n          </button>\\n        </div>\\n      </div>\\n\\n      {/* Main Content */}\\n      <div className=\\\"flex-1 p-4\\\">\\n        <h2 className=\\\"text-2xl font-bold mb-4\\\">Welcome to your Dashboard! 👋</h2>\\n\\n        {showProfile ? (\\n          <Profile />\\n        ) : (\\n          <>\\n            <TaskForm onAddTask={handleAddTask} />\\n            <TaskList tasks={tasks} onUpdateTask={handleUpdateTask} onDeleteTask={handleDeleteTask} />\\n          </>\\n        )}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\"\n    },\n    \"/components/Dashboard/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport { Check, Trash, Edit } from 'lucide-react';\\n\\nconst TaskList = ({ tasks, onUpdateTask, onDeleteTask }) => {\\n  return (\\n    <div className=\\\"mt-4\\\">\\n      <h3 className=\\\"text-xl font-bold mb-2\\\">Task List</h3>\\n      {tasks.length === 0 ? (\\n        <p>No tasks yet! Add one above. 🚀</p>\\n      ) : (\\n        <ul>\\n          {tasks.map((task) => (\\n            <li key={task.id} className=\\\"bg-white shadow-md rounded p-4 mb-2 flex items-center justify-between\\\">\\n              <div>\\n                <span className={`mr-2 ${task.completed ? 'line-through text-gray-500' : ''}`}>{task.title}</span>\\n                <p className=\\\"text-gray-600 text-sm\\\">{task.description}</p>\\n              </div>\\n\\n              <div className=\\\"flex items-center\\\">\\n                <button onClick={() => onUpdateTask({ ...task, completed: !task.completed })} className=\\\"text-green-500 hover:text-green-700 mr-2 focus:outline-none\\\">\\n                  <Check className=\\\"h-5 w-5\\\" />\\n                </button>\\n                <button onClick={() => onDeleteTask(task.id)} className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\">\\n                  <Trash className=\\\"h-5 w-5\\\" />\\n                </button>\\n              </div>\\n            </li>\\n          ))}\\n        </ul>\\n      )}\\n    </div>\\n  );\\n};\\n\\nexport default TaskList;\"\n    },\n    \"/components/Dashboard/TaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nconst TaskForm = ({ onAddTask }) => {\\n  const [title, setTitle] = useState('');\\n  const [description, setDescription] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (!title.trim()) return;\\n    onAddTask({ title, description, completed: false });\\n    setTitle('');\\n    setDescription('');\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\\\">\\n      <h3 className=\\\"text-xl font-bold mb-4\\\">Add New Task</h3>\\n      <div className=\\\"mb-4\\\">\\n        <label className=\\\"block text-gray-700 text-sm font-bold mb-2\\\" htmlFor=\\\"title\\\">\\n          Title\\n        </label>\\n        <input\\n          className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n          id=\\\"title\\\"\\n          type=\\\"text\\\"\\n          placeholder=\\\"Task Title\\\"\\n          value={title}\\n          onChange={(e) => setTitle(e.target.value)}\\n        />\\n      </div>\\n      <div className=\\\"mb-6\\\">\\n        <label className=\\\"block text-gray-700 text-sm font-bold mb-2\\\" htmlFor=\\\"description\\\">\\n          Description\\n        </label>\\n        <textarea\\n          className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n          id=\\\"description\\\"\\n          placeholder=\\\"Task Description\\\"\\n          value={description}\\n          onChange={(e) => setDescription(e.target.value)}\\n        />\\n      </div>\\n      <div className=\\\"flex items-center justify-between\\\">\\n        <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline flex items-center\\\">\\n          Add Task <Plus className=\\\"ml-2\\\" size={16} />\\n        </button>\\n      </div>\\n    </form>\\n  );\\n};\\n\\nexport default TaskForm;\"\n    },\n    \"/components/Dashboard/Profile.js\": {\n      \"code\": \"import React from 'react';\\nimport { useAuth } from '../../context/AuthContext';\\n\\nconst Profile = () => {\\n  const { currentUser } = useAuth();\\n\\n  return (\\n    <div className=\\\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\\\">\\n      <h2 className=\\\"text-2xl font-bold mb-4\\\">User Profile 👤</h2>\\n      <div>\\n        <p><span className=\\\"font-bold\\\">Email:</span> {currentUser?.email}</p>\\n        {/* Add more user profile information here as needed */}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Profile;\"\n    },\n    \"/context/AuthContext.js\": {\n      \"code\": \"import React, { createContext, useState, useEffect, useContext } from 'react';\\nimport { auth } from '../firebase'; // Import the auth instance from firebase.js\\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth';\\n\\nconst AuthContext = createContext();\\n\\nexport const useAuth = () => {\\n  return useContext(AuthContext);\\n};\\n\\nexport const AuthProvider = ({ children }) => {\\n  const [currentUser, setCurrentUser] = useState(null);\\n  const [loading, setLoading] = useState(true);\\n\\n  const signup = (email, password) => {\\n    return createUserWithEmailAndPassword(auth, email, password);\\n  };\\n\\n  const login = (email, password) => {\\n    return signInWithEmailAndPassword(auth, email, password);\\n  };\\n\\n  const logout = () => {\\n    return signOut(auth);\\n  };\\n\\n  useEffect(() => {\\n    const unsubscribe = auth.onAuthStateChanged(user => {\\n      setCurrentUser(user);\\n      setLoading(false);\\n    });\\n\\n    return unsubscribe;\\n  }, []);\\n\\n  const value = {\\n    currentUser,\\n    signup,\\n    login,\\n    logout\\n  };\\n\\n  return (\\n    <AuthContext.Provider value={value}>\\n      {!loading && children}\\n    </AuthContext.Provider>\\n  );\\n};\"\n    },\n    \"/firebase.js\": {\n      \"code\": \"// Import the functions you need from the SDKs you need\\nimport { initializeApp } from \\\"firebase/app\\\";\\nimport { getAuth } from \\\"firebase/auth\\\";\\nimport { getFirestore, collection, addDoc, getDocs, updateDoc, deleteDoc, doc } from 'firebase/firestore';\\n\\n// Your web app's Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\nexport const auth = getAuth(app);\\nconst db = getFirestore(app);\\n\\n// Function to get tasks from Firestore\\nexport const getTasks = async (userId) => {\\n  const tasksCollection = collection(db, `users/${userId}/tasks`);\\n  const taskSnapshot = await getDocs(tasksCollection);\\n  const taskList = taskSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\\n  return taskList;\\n};\\n\\n// Function to add a task to Firestore\\nexport const addTask = async (userId, task) => {\\n  const tasksCollection = collection(db, `users/${userId}/tasks`);\\n  const newTaskRef = await addDoc(tasksCollection, task);\\n  return { id: newTaskRef.id, ...task };\\n};\\n\\n// Function to update a task in Firestore\\nexport const updateTask = async (userId, task) => {\\n  const taskDocRef = doc(db, `users/${userId}/tasks`, task.id);\\n  await updateDoc(taskDocRef, task);\\n};\\n\\n// Function to delete a task from Firestore\\nexport const deleteTask = async (userId, taskId) => {\\n  const taskDocRef = doc(db, `users/${userId}/tasks`, taskId);\\n  await deleteDoc(taskDocRef);\\n};\\n\\nexport default app;\"\n    },\n     \"/index.js\": {\n      \"code\": \"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport App from './App';\\nimport reportWebVitals from './reportWebVitals';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n// If you want to start measuring performance in your app, pass a function\\n// to log results (for example: reportWebVitals(console.log))\\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\\nreportWebVitals();\"\n    },\n    \"/index.css\": {\n      \"code\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\"\n    },\n    \"/tailwind.config.js\": {\n      \"code\": \"/** @type {import('tailwindcss').Config} */\\nmodule.exports = {\\n  content: [\\\"./src/**/*.{html,js}\\\"],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [],\\n}\"\n    }\n\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/auth/Login.js\",\n    \"/components/auth/Register.js\",\n    \"/components/Dashboard/Dashboard.js\",\n    \"/components/Dashboard/TaskList.js\",\n    \"/components/Dashboard/TaskForm.js\",\n    \"/components/Dashboard/Profile.js\",\n    \"/context/AuthContext.js\",\n    \"/firebase.js\",\n    \"/index.js\",\n    \"/index.css\",\n    \"/tailwind.config.js\"\n  ]\n}\n```"},
        ],
      },
    ],
     
  })
  // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
  // console.log(result.response.text());